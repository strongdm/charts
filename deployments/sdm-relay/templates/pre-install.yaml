{{- if .Values.strongdm.autoRegisterCluster.enabled }}
{{ $name := printf "%s-create-relay" .Release.Name }}
---
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: true
metadata:
  name: {{ $name }}
  namespace: {{ .Release.Namespace }}
  annotations:
    helm.sh/hook: pre-install
    helm.sh/hook-weight: "-4"
    helm.sh/hook-delete-policy: hook-succeeded
    {{- include "strongdm.annotations" . | nindent 4 }}
  labels:
    {{- include "strongdm.labels" . | nindent 4 }}

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{ $name }}
  namespace: {{ .Release.Namespace }}
  annotations:
    helm.sh/hook: pre-install
    helm.sh/hook-weight: "-3"
    helm.sh/hook-delete-policy: hook-succeeded
    {{- include "strongdm.annotations" . | nindent 4 }}
  labels:
    {{- include "strongdm.labels" . | nindent 4 }}
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["create"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ $name }}
  namespace: {{ .Release.Namespace }}
  annotations:
    helm.sh/hook: pre-install
    helm.sh/hook-weight: "-2"
    helm.sh/hook-delete-policy: hook-succeeded
    {{- include "strongdm.annotations" . | nindent 4 }}
  labels:
    {{- include "strongdm.labels" . | nindent 4 }}
subjects:
  - kind: ServiceAccount
    name: {{ $name }}
    namespace: {{ .Release.Namespace }}
roleRef:
  kind: Role
  name: {{ $name }}
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ $name }}
  namespace: {{ .Release.Namespace }}
  annotations:
    helm.sh/hook: pre-install
    helm.sh/hook-weight: "-1"
    helm.sh/hook-delete-policy: hook-succeeded
    {{- include "strongdm.annotations" . | nindent 4 }}
  labels:
    {{- include "strongdm.labels" . | nindent 4 }}
spec:
  completions: 1
  parallelism: 1
  backoffLimit: 3
  ttlSecondsAfterFinished: 300
  template:
    metadata:
      annotations:
        {{- include "strongdm.annotations" (merge (dict "addtl" .Values.strongdm.pod.annotations) .) | nindent 8 }}
      labels:
        {{- include "strongdm.labels" (merge (dict "addtl" .Values.strongdm.pod.labels) .) | nindent 8 }}
    spec:
      serviceAccountName: {{ $name }}
      restartPolicy: Never
      volumes:
        - name: data
          emptyDir: {}
      initContainers:
        - name: sdm
          image: {{ template "strongdm.imageURI" . }}
          imagePullPolicy: {{ .Values.strongdm.image.pullPolicy }}
          resources:
            requests:
              memory: 256Mi
              cpu: 256m
            limits:
              memory: 256Mi
          volumeMounts:
            - name: data
              mountPath: /data
          env:
            # Reference these directly because we don't yet have access to the created Secret nor ConfigMap
            - name: SDM_DOMAIN
              value: {{ .Values.strongdm.config.domain }}
            - name: SDM_ADMIN_TOKEN
              {{- if .Values.strongdm.auth.secretName }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.strongdm.auth.secretName }}
                  key: SDM_ADMIN_TOKEN
              {{- else }}
              value: {{ .Values.strongdm.auth.adminToken }}
              {{- end }}
          command:
            - /bin/bash
            - -c
            - |
              /sdm.linux login --admin-token="${SDM_ADMIN_TOKEN}"
              echo "SDM_RELAY_TOKEN=$(/sdm.linux admin node create --maintenance-windows {{ .Values.strongdm.config.maintenanceWindows | squote }} --name {{ .Values.strongdm.autoCreateNode.name | squote }} --tags {{ .Values.strongdm.autoCreateNode.tags | squote }})" > /data/token
      containers:
        - name: kubectl
          {{- $kubeVersion := semver .Capabilities.KubeVersion.Version }}
          image: public.ecr.aws/bitnami/kubectl:{{ $kubeVersion.Major }}.{{ $kubeVersion.Minor }}
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              memory: 256Mi
              cpu: 256m
            limits:
              memory: 256Mi
          volumeMounts:
            - name: data
              mountPath: /data
              readOnly: true
          command:
            - /bin/bash
            - -c
            - kubectl create secret generic {{ .Release.Name }}-relay-token --from-literal=$(cat /data/token) --namespace {{ .Release.Namespace }}
{{- end }}
