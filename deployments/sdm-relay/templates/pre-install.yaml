{{- if .Values.strongdm.autoCreateNode.enabled }}
{{- if not (or .Values.strongdm.auth.secretName .Values.strongdm.auth.adminToken) }}
{{- fail "one of @strongdm.auth.adminToken or @strongdm.auth.secretName must be set when @strongdm.autoCreateNode.enabled during installation." }}
{{- end }}
{{ $name := printf "%s-auto-create-node-%s" (include "strongdm.name" .) (randAlpha 5 | lower) }}
---
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: true
metadata:
  name: {{ $name }}
  namespace: {{ include "strongdm.namespace" . }}
  annotations:
    helm.sh/hook: pre-install
    helm.sh/hook-weight: "-3"
    helm.sh/hook-delete-policy: hook-succeeded
    {{- include "strongdm.annotations" . | nindent 4 }}
  labels:
    {{- include "strongdm.labels" . | nindent 4 }}

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{ $name }}
  namespace: {{ include "strongdm.namespace" . }}
  annotations:
    helm.sh/hook: pre-install
    helm.sh/hook-weight: "-3"
    helm.sh/hook-delete-policy: hook-succeeded
    {{- include "strongdm.annotations" . | nindent 4 }}
  labels:
    {{- include "strongdm.labels" . | nindent 4 }}
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "create", "patch", "update"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ $name }}
  namespace: {{ include "strongdm.namespace" . }}
  annotations:
    helm.sh/hook: pre-install
    helm.sh/hook-weight: "-2"
    helm.sh/hook-delete-policy: hook-succeeded
    {{- include "strongdm.annotations" . | nindent 4 }}
  labels:
    {{- include "strongdm.labels" . | nindent 4 }}
subjects:
  - kind: ServiceAccount
    name: {{ $name }}
    namespace: {{ include "strongdm.namespace" . }}
roleRef:
  kind: Role
  name: {{ $name }}
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ $name }}
  namespace: {{ include "strongdm.namespace" . }}
  annotations:
    helm.sh/hook: pre-install
    helm.sh/hook-weight: "-1"
    helm.sh/hook-delete-policy: hook-succeeded
    {{- include "strongdm.annotations" . | nindent 4 }}
  labels:
    {{- include "strongdm.labels" . | nindent 4 }}
spec:
  completions: 1
  parallelism: 1
  backoffLimit: 0 # avoid crash looping and creating multiple orphaned relays
  ttlSecondsAfterFinished: 300
  template:
    metadata:
      annotations:
        {{- include "strongdm.annotations" (merge (dict "addtl" .Values.strongdm.pod.annotations) .) | nindent 8 }}
      labels:
        {{- include "strongdm.labels" (merge (dict "addtl" .Values.strongdm.pod.labels) .) | nindent 8 }}
    spec:
      serviceAccountName: {{ $name }}
      restartPolicy: Never
      volumes:
        - name: secrets
          emptyDir: {}
      initContainers:
        - name: sdm
          image: {{ template "strongdm.imageURI" . }}
          imagePullPolicy: {{ .Values.strongdm.image.pullPolicy }}
          resources:
            requests:
              memory: 256Mi
              cpu: 256m
            limits:
              memory: 256Mi
          volumeMounts:
            - name: secrets
              mountPath: /secrets
          env:
            # Reference these directly because we don't yet have access to the created Secret nor ConfigMap
            - name: SDM_APP_DOMAIN
              value: {{ include "strongdm.appDomain" . }}
            - name: SDM_ADMIN_TOKEN
              {{- if .Values.strongdm.auth.secretName }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.strongdm.auth.secretName }}
                  key: SDM_ADMIN_TOKEN
              {{- else }}
              value: {{ .Values.strongdm.auth.adminToken }}
              {{- end }}
          command:
            - /bin/bash
            - -c
            - |
              set -e -o pipefail
              /sdm.linux login --admin-token="${SDM_ADMIN_TOKEN}"
            {{- $commonArgs := printf "--maintenance-windows %s --name %s --tags %s" (squote .Values.strongdm.autoCreateNode.maintenanceWindows) (squote .Values.strongdm.autoCreateNode.name) (squote .Values.strongdm.autoCreateNode.tags) }}
            {{- if .Values.strongdm.gateway.enabled }}
              SDM_RELAY_TOKEN="$(/sdm.linux admin node create-gateway {{ $commonArgs }} {{ .Values.strongdm.gateway.listenAddress }}:{{ .Values.strongdm.gateway.listenPort }})"
            {{- else }}
              SDM_RELAY_TOKEN="$(/sdm.linux admin node create {{ $commonArgs }})"
            {{- end }}
              if ! grep -qE "^[[:graph:]]+[.][[:graph:]]+[.][[:graph:]]+$" <<< "${SDM_RELAY_TOKEN}"; then
                echo "${SDM_RELAY_TOKEN}"
                exit 3
              fi
              echo "SDM_RELAY_TOKEN=${SDM_RELAY_TOKEN}" > /secrets/token
      containers:
        - name: kubectl
          {{- $kubeVersion := semver .Capabilities.KubeVersion.Version }}
          image: {{ default (printf "bitnami/kubectl:%s.%s" $kubeVersion.Major $kubeVersion.Minor) .Values.strongdm.autoCreateNode.kubectlImage }}
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              memory: 256Mi
              cpu: 256m
            limits:
              memory: 256Mi
          volumeMounts:
            - name: secrets
              mountPath: /secrets
              readOnly: true
          command:
            - /bin/bash
            - -c
            - |
              kubectl create secret generic {{ include "strongdm.name" . }}-relay-token --from-literal="$(cat /secrets/token)" --namespace {{ include "strongdm.namespace" . }} --dry-run=client -o yaml | kubectl apply -f -
{{- end }}
