suite: test sdm-proxy clusterrole RBAC conditions
templates:
  - clusterrole.yaml
tests:
  - it: should create basic health and discovery RBAC without identity aliases
    set:
      strongdm.auth.clusterKey: "test-key"
      strongdm.auth.clusterSecret: "test-secret"
    asserts:
      - hasDocuments:
          count: 4
      - containsDocument:
          kind: ClusterRole
          name: NAMESPACE-RELEASE-NAME-health
          apiVersion: rbac.authorization.k8s.io/v1
          any: true
      - containsDocument:
          kind: ClusterRoleBinding
          name: NAMESPACE-RELEASE-NAME-health
          apiVersion: rbac.authorization.k8s.io/v1
          any: true
      - containsDocument:
          kind: ClusterRole
          name: NAMESPACE-RELEASE-NAME-discovery
          apiVersion: rbac.authorization.k8s.io/v1
          any: true
      - containsDocument:
          kind: ClusterRoleBinding
          name: NAMESPACE-RELEASE-NAME-discovery
          apiVersion: rbac.authorization.k8s.io/v1
          any: true
  - it: should not create impersonation RBAC without identity set
    set:
      strongdm.auth.clusterKey: "test-key"
      strongdm.auth.clusterSecret: "test-secret"
    asserts:
      - hasDocuments:
          count: 4

  - it: should only include service account in subjects without identity aliases
    set:
      strongdm.auth.clusterKey: "test-key"
      strongdm.auth.clusterSecret: "test-secret"
    documentIndex: 1
    asserts:
      - equal:
          path: subjects
          value:
            - kind: ServiceAccount
              name: RELEASE-NAME
              namespace: NAMESPACE
      - notContains:
          path: subjects
          value:
            - kind: User

  - it: should allow admins to specify users with identity aliases
    set:
      strongdm.auth.clusterKey: "test-key"
      strongdm.auth.clusterSecret: "test-secret"
      strongdm.auth.adminToken: "test-token"
      strongdm.autoRegisterCluster.enabled: true
      strongdm.autoRegisterCluster.identitySet: "test-identity-set"
      strongdm.healthcheckUsername: "test-healthcheck-user"
    documentIndex: 1
    asserts:
      - equal:
          path: subjects[0].kind
          value: ServiceAccount
      - equal:
          path: subjects[1].kind
          value: User

  - it: should create all RBAC with identity aliases
    set:
      strongdm.auth.clusterKey: "test-key"
      strongdm.auth.clusterSecret: "test-secret"
      strongdm.auth.adminToken: "test-token"
      strongdm.autoRegisterCluster.enabled: true
      strongdm.autoRegisterCluster.identitySetName: "test-identity-set"
      strongdm.healthcheckUsername: "test-healthcheck-user"
      strongdm.discoveryUsername: "test-discovery-user"
    asserts:
      - hasDocuments:
          count: 6
      - containsDocument:
          kind: ClusterRole
          name: NAMESPACE-RELEASE-NAME-health
          apiVersion: rbac.authorization.k8s.io/v1
          any: true
      - containsDocument:
          kind: ClusterRoleBinding
          name: NAMESPACE-RELEASE-NAME-health
          apiVersion: rbac.authorization.k8s.io/v1
          any: true
      - containsDocument:
          kind: ClusterRole
          name: NAMESPACE-RELEASE-NAME-discovery
          apiVersion: rbac.authorization.k8s.io/v1
          any: true
      - containsDocument:
          kind: ClusterRoleBinding
          name: NAMESPACE-RELEASE-NAME-discovery
          apiVersion: rbac.authorization.k8s.io/v1
          any: true
      - containsDocument:
          kind: ClusterRole
          name: NAMESPACE-RELEASE-NAME-impersonate
          apiVersion: rbac.authorization.k8s.io/v1
          any: true
      - containsDocument:
          kind: ClusterRoleBinding
          name: NAMESPACE-RELEASE-NAME-impersonate
          apiVersion: rbac.authorization.k8s.io/v1
          any: true
